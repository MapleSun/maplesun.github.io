<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Stock Problems(121, 122, 123, 188, 309, 714)</title>
      <link href="/2018/06/09/Stock-Problems-121-122-123-188-309-714/"/>
      <url>/2018/06/09/Stock-Problems-121-122-123-188-309-714/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>239. Sliding Window Maximum</title>
      <link href="/2018/06/07/239-Sliding-Window-Maximum/"/>
      <url>/2018/06/07/239-Sliding-Window-Maximum/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>We scan the array from 0 to n-1, keep “promising” elements in the deque. The algorithm is amortized O(n) as each element is put and polled once.</p><p>At each i, we keep “promising” elements, which are potentially max number in window [i-(k-1),i] or any subsequent window. This means</p><ol><li><p>If an element in the deque and it is out of i-(k-1), we discard them. We just need to poll from the head, as we are using a deque and elements are ordered as the sequence in the array. <code>(q.peek() &gt; i - k + 1)</code> 超过了range</p></li><li><p>Now only those elements within [i-(k-1),i] are in the deque. We then discard elements smaller than a[i] from the tail. This is because if a[x] &lt;a[i] and x&lt;i, then a[x] has no chance to be the “max” in [i-(k-1),i], or any other subsequent window: a[i] would always be a better candidate.</p></li><li><p>As a result elements in the deque are ordered in both sequence in array and their value. At each step the head of the deque is the max element in [i-(k-1),i]</p></li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] a, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[n-k+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> ri = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// store index</span></span><br><span class="line">    Deque&lt;Integer&gt; q = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="comment">// remove numbers out of range k</span></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; q.peek() &lt; i - k + <span class="number">1</span>) &#123;</span><br><span class="line">            q.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// remove smaller numbers in k range as they are useless</span></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; a[q.peekLast()] &lt; a[i]) &#123;</span><br><span class="line">            q.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// q contains index... r contains content</span></span><br><span class="line">        q.offer(i);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">            r[ri++] = a[q.peek()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>56. Merge Intervals</title>
      <link href="/2018/06/07/56-Merge-Intervals/"/>
      <url>/2018/06/07/56-Merge-Intervals/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a collection of intervals, merge all overlapping intervals.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ol><li>需要按Interval得start排序，以确保不会出现 <code>[4,5],[1,2] -&gt; [1,5]</code> 的情况</li><li>遍历intervals的数组 用一个temp记录interval，当出现overlap时，进行merge，<br>`if (newInterval.start &lt;= temp.end) {<pre><code>    temp.start = Math.min(temp.start, newInterval.start);    temp.end = Math.max(temp.end, newInterval.end);}`</code></pre></li><li>没有overlap时，将temp添加到result的list里，并且将新的interval赋值给temp</li><li>将最后一个Interval字段加入结果</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(nlogn) since Collections.sort</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">    List&lt;Interval&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    intervals.sort(Comparator.comparingInt(o -&gt; o.start));</span><br><span class="line">    Interval temp = intervals.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class="line">        Interval newInterval = intervals.get(i);</span><br><span class="line">        <span class="keyword">if</span> (newInterval.start &lt;= temp.end) &#123;</span><br><span class="line">            temp.start = Math.min(temp.start, newInterval.start);</span><br><span class="line">            temp.end = Math.max(temp.end, newInterval.end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.add(temp);</span><br><span class="line">            temp = newInterval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    res.add(temp);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>57. Insert Interval</title>
      <link href="/2018/06/07/57-Insert-Interval/"/>
      <url>/2018/06/07/57-Insert-Interval/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).</p><p>You may assume that the intervals were initially sorted according to their start times.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>先要找到目标interval，然后判断如何制作一个新的 newInterval</p><ol><li>use a while loop to find the right interval </li></ol><ul><li><code>while (i &lt; intervals.size() &amp;&amp; intervals.get(i).end &lt; newInterval.start)</code></li></ul><ol start="2"><li>然后看现有的interval，改变现有的newInterval</li></ol><ul><li><code>while (i &lt; intervals.size() &amp;&amp; intervals.get(i).start &lt;= newInterval.end)</code><br>拿到两者间最小的start和最大的end确保interval最大 </li><li>`newInterval = new Interval(<pre><code>Math.min(newInterval.start, intervals.get(i).start),Math.max(newInterval.end, intervals.get(i).end));`</code></pre></li></ul><ol start="3"><li>将newInterval加入result</li><li>将剩下的interval加入result</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time：O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">insert</span><span class="params">(List&lt;Interval&gt; intervals, Interval newInterval)</span> </span>&#123;</span><br><span class="line">    List&lt;Interval&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size() &amp;&amp; intervals.get(i).end &lt; newInterval.start) &#123;</span><br><span class="line">        result.add(intervals.get(i++));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; intervals.size() &amp;&amp; intervals.get(i).start &lt;= newInterval.end) &#123;</span><br><span class="line">        newInterval = <span class="keyword">new</span> Interval(</span><br><span class="line">            Math.min(newInterval.start, intervals.get(i).start),</span><br><span class="line">            Math.max(newInterval.end, intervals.get(i).end));</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    result.add(newInterval);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt;intervals.size()) result.add(intervals.get(i++));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>135. Candy</title>
      <link href="/2018/06/07/135-Candy/"/>
      <url>/2018/06/07/135-Candy/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>There are N children standing in a line. Each child is assigned a rating value.</p><p>You are giving candies to these children subjected to the following requirements:</p><ul><li>Each child must have at least one candy.</li><li>Children with a higher rating get more candies than their neighbors.<br>What is the minimum candies you must give?</li></ul><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>基本的，每个孩子最少要拿到一枚糖，<br>从左往右如果<code>ratings[i] &lt; ratings[i+1]</code> 第i+1th孩子 应该 拿到ith 孩子的糖 + 1<br>从右往左<code>ratings[i-1] &gt; ratings[i]</code> 并且 i-1th 孩子的糖少于 ith孩子 第i-1th孩子 应该 拿到ith 孩子的糖 + 1</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[ratings.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        a[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ratings.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ratings[i+i] &gt; ratings[i]) &#123;</span><br><span class="line">            a[i+<span class="number">1</span>] = a[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ratings.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ratings[i-<span class="number">1</span>] &gt; ratings[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i-<span class="number">1</span>] &lt; (a[i] + <span class="number">1</span>)) &#123;</span><br><span class="line">                a[i-<span class="number">1</span>] = a[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>287. Find the Duplicate Number</title>
      <link href="/2018/06/07/287-Find-the-Duplicate-Number/"/>
      <url>/2018/06/07/287-Find-the-Duplicate-Number/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>全无头绪啊，discuss里是说把value做为下标，用快慢指针去找，~~如果有相同的值（duplicate)找过以后会形成环circle. Duplicate 肯定是circle的入口(entry point). ~~<br>当slow == fast的时候让其中一个从新从0开始，他们就会在entry point在遇到。</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; len &amp;&amp; nums[fast] &lt; len) &#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                slow = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">                    slow = nums[slow];</span><br><span class="line">                    fast = nums[fast];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> slow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> slow = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> fast = nums[nums[<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">while</span> (slow != fast)</span><br><span class="line">            &#123;</span><br><span class="line">                slow = nums[slow];</span><br><span class="line">                fast = nums[nums[fast]];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fast = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (fast != slow)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = nums[fast];</span><br><span class="line">                slow = nums[slow];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>128. Longest Consecutive Sequence</title>
      <link href="/2018/06/06/128-Longest-Consecutive-Sequence/"/>
      <url>/2018/06/06/128-Longest-Consecutive-Sequence/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p><p>Your algorithm should run in O(n) complexity.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>Use a HashMap to record the longest sequence it can reach <code>map.put(nums[i], longest)</code> </p><p>Whenever a new element n is inserted into the map, do two things:</p><ol><li>See if n - 1 and n + 1 exist in the map, and if so, it means there is an existing sequence next to n. Variables left and right will be the length of those two sequences, while 0 means there is no sequence and n will be the boundary point later. Store (left + right + 1) as the associated value to key n into the map.</li><li>Use left and right to locate the other end of the sequences to the left and right of n respectively, and replace the value with the new length.</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(n)) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = (map.containsKey(n - <span class="number">1</span>)) ? map.get(n - <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = (map.containsKey(n + <span class="number">1</span>)) ? map.get(n + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// sum: length of the sequence n is in</span></span><br><span class="line">            <span class="keyword">int</span> sum = left + right + <span class="number">1</span>;</span><br><span class="line">            map.put(n, sum);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// keep track of the max length </span></span><br><span class="line">            res = Math.max(res, sum);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// extend the length to the boundary(s)</span></span><br><span class="line">            <span class="comment">// of the sequence</span></span><br><span class="line">            <span class="comment">// will do nothing if n has no neighbors</span></span><br><span class="line">            map.put(n - left, sum);</span><br><span class="line">            map.put(n + right, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// duplicates</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>334. Increasing Triplet Subsequence</title>
      <link href="/2018/06/06/334-Increasing-Triplet-Subsequence/"/>
      <url>/2018/06/06/334-Increasing-Triplet-Subsequence/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.</p><p>Formally the function should:</p><blockquote><p>Return true if there exists i, j, k, such that arr[i] &lt; arr[j] &lt; arr[k] &lt;= n-1 else return false</p></blockquote><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>需要找到最小的和中间的，满足最小的 永远 小于中间的，</p><ol><li>当 <code>nums[i] &lt; small</code> 其实我们并不关心，我们只关心此时是否有比中间值更大的数</li><li>当 <code>small &lt; nums[i] &lt; mid</code> 此时更新中间值mid，原来 <code>small mid</code> -&gt; <code>small mid nums[i]</code>  -&gt; <code>small old_mid mid</code></li><li>当 <code>small &lt; mid &lt; nums[i]</code>  此时找到triplet sequence</li></ol><h2 id="Compleixty"><a href="#Compleixty" class="headerlink" title="Compleixty"></a>Compleixty</h2><p>Time: O(n)<br>Space: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increasingTriplet</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> small = Integer.MAX_VALUE, big = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= small) &#123;</span><br><span class="line">            small = n;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= big) &#123;</span><br><span class="line">            big = n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>42. Trapping Rain Water</title>
      <link href="/2018/06/06/42-Trapping-Rain-Water/"/>
      <url>/2018/06/06/42-Trapping-Rain-Water/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p>Ex: [0,1,0,2,1,0,1,3,2,1,2,1]</p><p>1<a href="http://www.leetcode.com/static/images/problemset/rainwatertrap.png" target="_blank" rel="noopener">example</a></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>首先，碰到这样的题目不要慌张，挨个分析每个A[i]能trapped water的容量，然后将所有的A[i]的trapped water容量相加即可</p><p>其次，对于每个A[i]能trapped water的容量，取决于A[i]左右两边的高度（可延展）较小值与A[i]的差值，即volume[i] = [min(left[i], right[i]) - A[i]] * 1，这里的1是宽度，如果the width of each bar is 2,那就要乘以2了</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[height.length];</span><br><span class="line">    <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[height.length];</span><br><span class="line">    <span class="comment">// int[] water = new int[height.length];</span></span><br><span class="line">    <span class="keyword">int</span> max, total = <span class="number">0</span>;</span><br><span class="line">    max = height[<span class="number">0</span>];</span><br><span class="line">    left[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">        left[i] = Math.max(max, height[i]);</span><br><span class="line">        max = Math.max(max, left[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    max = height[height.length - <span class="number">1</span>];</span><br><span class="line">    right[height.length - <span class="number">1</span>] = height[height.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = height.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        right[i] = Math.max(max, height[i]);</span><br><span class="line">        max = Math.max(max, right[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height.length-<span class="number">1</span>; i++) &#123;  </span><br><span class="line">            <span class="keyword">int</span> bit = Math.min(left[i], right[i]) - height[i];  </span><br><span class="line">            <span class="keyword">if</span> (bit &gt; <span class="number">0</span>)  total += bit;  </span><br><span class="line">        &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>309. Best Time to Buy and Sell Stock IV</title>
      <link href="/2018/06/05/309-Best-Time-to-Buy-and-Sell-Stock-IV/"/>
      <url>/2018/06/05/309-Best-Time-to-Buy-and-Sell-Stock-IV/</url>
      <content type="html"><![CDATA[<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sell = <span class="number">0</span>, prev_sell = <span class="number">0</span>, buy = Integer.MIN_VALUE, prev_buy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">        prev_buy = buy;</span><br><span class="line">        buy = Math.max(prev_sell - price, prev_buy);</span><br><span class="line">        prev_sell = sell;</span><br><span class="line">        sell = Math.max(prev_buy + price, prev_sell);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>123. Best Time to Buy and Sell Stock III</title>
      <link href="/2018/06/05/123-Best-Time-to-Buy-and-Sell-Stock-III/"/>
      <url>/2018/06/05/123-Best-Time-to-Buy-and-Sell-Stock-III/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p><p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/39615/My-explanation-for-O(N)-solution" target="_blank" rel="noopener">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/39615/My-explanation-for-O(N)-solution</a>!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">To understand the hidden logic, you have to understand what these 4 variables stand for.</span><br><span class="line"></span><br><span class="line">sell2: Final profit.</span><br><span class="line">buy2: Best profit so far, if you buy the stock not after Day i (2nd transaction).</span><br><span class="line">sell1: Best profit so far, if you sell the stock not after Day i (1st transaction).</span><br><span class="line">buy1: Minimum price to buy the stock.</span><br><span class="line"></span><br><span class="line">The logic between buy1 and sell1 is quite straight forward. What you need to do is simply find a minimum price to buy and sell it some days after.</span><br><span class="line">Of course, sell1 won&apos;t update if the profit is not greater than before even if you buy the stock at a lower price. Let&apos;s assume you sell the stock at Day a to get the greatest profit for the 1st transaction, which stores in sell1.</span><br><span class="line"></span><br><span class="line">Now comes the trick. Assume you find a better deal at Day b, sell1 get updated. So you have 2 choice for buy2:</span><br><span class="line"></span><br><span class="line">not update buy2, you still sell your stock at Day a. Nothing changed.</span><br><span class="line">update buy2 with new sell1, which means you sell the stock at Day b.</span><br><span class="line">buy2 = sell1 - price[i] means you sell you stock at Day b and buy it at Day i. And Day i is definitely not early than Day b, which is the hidden logic.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sell1 = <span class="number">0</span>, sell2 = <span class="number">0</span>, buy1 = Integer.MIN_VALUE, buy2 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        buy1 = Math.max(buy1, -prices[i]);</span><br><span class="line">        sell1 = Math.max(sell1, buy1 + prices[i]);</span><br><span class="line">        buy2 = Math.max(buy2, sell1 - prices[i]);</span><br><span class="line">        sell2 = Math.max(sell2, buy2 + prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sell2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>122. Best Time to Buy and Sell Stock II</title>
      <link href="/2018/06/05/122-Best-Time-to-Buy-and-Sell-Stock-II/"/>
      <url>/2018/06/05/122-Best-Time-to-Buy-and-Sell-Stock-II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p><p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>Sell and buy on the same day == not sell</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] - prices[i-<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            profit += prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>121. Best Time to Buy and Sell Stock</title>
      <link href="/2018/06/05/121-Best-Time-to-Buy-and-Sell-Stock/"/>
      <url>/2018/06/05/121-Best-Time-to-Buy-and-Sell-Stock/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>我的想法 O(n^2), 用两个loop 去检查当前位置的最大profit， 再用一个loop比较取得最大的profit</p><p>可以通过记录当前最小值来减少时间复杂度 O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sofarMin = prices[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        max = Math.max(max, prices[i] - sofarMin);</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; sofarMin) &#123;</span><br><span class="line">            sofarMin = prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n ^ 2)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] profit = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; prices.length; j++) &#123;</span><br><span class="line">            max = Math.max(prices[j]-prices[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        profit[i] = max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        maxProfit = Math.max(profit[i], maxProfit);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxProfit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>45 Jump Game II</title>
      <link href="/2018/06/05/45-Jump-Game-II/"/>
      <url>/2018/06/05/45-Jump-Game-II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Your goal is to reach the last index in the minimum number of jumps.</p><p><strong>Note:</strong></p><p>You can assume that you can always reach the last index.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>这一步能跳的范围是 i ~ i + nums[i], curFarthest 是之前所有点Max(i+nums[i]), 每次到达 i+nums[i] 发起另一个jump, curFarthest = i + nums[i]</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curtStep = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curtStepMaxReach = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nextStepMaxReach = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">            nextStepMaxReach = Math.max(nextStepMaxReach, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(i == curtStepMaxReach)&#123;</span><br><span class="line">                curtStep ++;</span><br><span class="line">                curtStepMaxReach = nextStepMaxReach;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curtStep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>55. Jump Game</title>
      <link href="/2018/06/05/55-Jump-Game/"/>
      <url>/2018/06/05/55-Jump-Game/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ol><li>Start with the recursive backtracking solution</li><li>Optimize by using a memoization table (top-down[3] dynamic programming)</li><li>Remove the need for recursion (bottom-up dynamic programming)</li><li>Apply final tricks to reduce the time / memory complexity</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><ol><li>Time: O(2^n) Space: O(n) recursion requires additional memory.</li><li>Time: O(n^2) Space: O(2n)</li><li>Time: O(n^2) Space: O(n)</li><li>Time: O(n) Space: O(1)</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Index &#123;</span><br><span class="line">    GOOD, BAD, UNKNOWN</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* TLE  Approach #1 (Backtracking) [Stack Overflow]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public boolean canJump(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        return canJumpFromPosition(0, nums);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public boolean canJumpFromPosition(int position, int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        if (position == nums.length - 1) &#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        int furthestJump = Math.min(position + nums[position], nums.length - 1);</span></span><br><span class="line"><span class="comment">        for (int nextPosition = furthestJump; nextPosition &gt; position; nextPosition--) &#123;</span></span><br><span class="line"><span class="comment">            if (canJumpFromPosition(nextPosition, nums)) &#123;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return false;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TLE Appraoch #2 Dynamic Programming Top-down Memoization </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Index[] memo;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public boolean canJumpFromPosition(int position, int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        if (memo[position] != Index.UNKNOWN) &#123;</span></span><br><span class="line"><span class="comment">            return memo[position] == Index.GOOD ? true : false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        int furthestJump = Math.min(position + nums[position], nums.length - 1);</span></span><br><span class="line"><span class="comment">        for (int nextPosition = position + 1; nextPosition &lt;= furthestJump; nextPosition++) &#123;</span></span><br><span class="line"><span class="comment">            if (canJumpFromPosition(nextPosition, nums)) &#123;</span></span><br><span class="line"><span class="comment">                memo[position] = Index.GOOD;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        memo[position] = Index.BAD;</span></span><br><span class="line"><span class="comment">        return false;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public boolean canJump(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        memo = new Index[nums.length];</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; memo.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            memo[i] = Index.UNKNOWN;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        memo[memo.length - 1] = Index.GOOD;</span></span><br><span class="line"><span class="comment">        return canJumpFromPosition(0, nums);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AC Approach #3 (Dynamic Programming Bottom-up)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean canJump(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        Index[] memo = new Index[nums.length];</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; memo.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            memo[i] = Index.UNKNOWN;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        memo[memo.length - 1] = Index.GOOD;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        for (int i = nums.length - 2; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="comment">            int furthestJump = Math.min(i + nums[i], nums.length - 1);</span></span><br><span class="line"><span class="comment">            for (int j = i + 1; j &lt;= furthestJump; j++) &#123;</span></span><br><span class="line"><span class="comment">                if (memo[j] == Index.GOOD) &#123;</span></span><br><span class="line"><span class="comment">                    memo[i] = Index.GOOD;</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return memo[0] == Index.GOOD;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastPos = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + nums[i] &gt;= lastPos) &#123;</span><br><span class="line">                lastPos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lastPos == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>220. Contains Duplicate III</title>
      <link href="/2018/06/05/220-Contains-Duplicate-III/"/>
      <url>/2018/06/05/220-Contains-Duplicate-III/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>和前两题有很大的区别，前两题的本质问题是在去重复。这题的改变了重复的性质，[-t, +t] 范围内的数都被认为是重复。</p><ol><li><p>Brute Force: 暴力解法是可以解决问题的，但是会超时，Time Complexity: O(tn)</p></li><li><p>Using TreeSet: TreeSet </p><blockquote><p>A NavigableSet implementation based on a TreeMap. The elements are ordered using their natural ordering, or by a Comparator provided at set creation time, depending on which constructor is used.<br>This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains).</p></blockquote></li></ol><p>This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains).</p><p>可以看到TreeSet是基于TreeMap实现的，线程不安全， TreeSet存储元素实际为TreeMap存储的键值对为&lt;key,PRESENT&gt;的key。因为是基于TreeMap实现的，本质是红黑树 Red-Black Tree，基本操作都是 log(n)</p><ul><li>Method：<ul><li>ceiling(E e): Returns the least element in this set greater than or equal to the given element, or null if there is no such element.</li><li>floor(E e): Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.</li></ul></li></ul><ul><li>遍历方式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序TreeSet：迭代器实现</span></span><br><span class="line">Iterator iter = set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    System.out.println(iter.next());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序遍历TreeSet：foreach实现</span></span><br><span class="line"><span class="keyword">for</span> (Integer i : set) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序遍历TreeSet：反向迭代器实现</span></span><br><span class="line">Iterator iter1 = set.descendingIterator();</span><br><span class="line"><span class="keyword">while</span> (iter1.hasNext()) &#123;</span><br><span class="line">    System.out.println(iter1.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>Bucket Sort<br>Bucketing means we map a range of values to the a bucket. 一个bucket对应的是0～t的范围。同时也要检查前后的bucket</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TLE Brute Force</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; k) set.remove(nums[i-k-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= t; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(nums[i]+j) || set.contains(nums[i]-j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeSet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || k &lt; <span class="number">1</span> || t &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeSet&lt;Long&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        Long floor = set.floor((<span class="keyword">long</span>)nums[i] + t);</span><br><span class="line">        Long ceil = set.ceiling((<span class="keyword">long</span>)nums[i] - t);</span><br><span class="line">        <span class="keyword">if</span> ((floor != <span class="keyword">null</span> &amp;&amp; floor &gt;= nums[i]) </span><br><span class="line">            || (ceil != <span class="keyword">null</span> &amp;&amp; ceil &lt;= nums[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        set.add((<span class="keyword">long</span>)nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">            set.remove((<span class="keyword">long</span>)nums[i - k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bucket</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">1</span> || t &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Map&lt;Long, Long&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> remappedNum = (<span class="keyword">long</span>) nums[i] - Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">long</span> bucket = remappedNum / ((<span class="keyword">long</span>) t + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(bucket)</span><br><span class="line">                || (map.containsKey(bucket - <span class="number">1</span>) &amp;&amp; remappedNum - map.get(bucket - <span class="number">1</span>) &lt;= t)</span><br><span class="line">                    || (map.containsKey(bucket + <span class="number">1</span>) &amp;&amp; map.get(bucket + <span class="number">1</span>) - remappedNum &lt;= t))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (map.entrySet().size() &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastBucket = ((<span class="keyword">long</span>) nums[i - k] - Integer.MIN_VALUE) / ((<span class="keyword">long</span>) t + <span class="number">1</span>);</span><br><span class="line">            map.remove(lastBucket);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(bucket, remappedNum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>219. Contians Duplicate II</title>
      <link href="/2018/06/04/219-Contians-Duplicate-II/"/>
      <url>/2018/06/04/219-Contians-Duplicate-II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>同样使用HashSet去重复，这次多了一个条件只有在k个以内的值才算重复，所以当i&gt;k是nums[i-k-1]需要在Set里被移除，不再作为重复。</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;k) set.remove(nums[i-k-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!set.add(nums[i])) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> HashSet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>217. Contains Duplicate</title>
      <link href="/2018/06/04/217-Contains-Duplicate/"/>
      <url>/2018/06/04/217-Contains-Duplicate/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of integers, find if the array contains any duplicates.</p><p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>简单的用HashSet 去重复，add method O(1), contains method O(1).</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.contains(n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> HashSet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>229. Majority Element II</title>
      <link href="/2018/06/04/229-Majority-Element-II/"/>
      <url>/2018/06/04/229-Majority-Element-II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.</p><p>Note: The algorithm should run in linear time and in O(1) space.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>Method 1 HashMap:</p><p>use HashMap to record how many time each element appear</p><p>Method 2 Boyer-Moore majority vote Algorithm:</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Method 1 HashMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(n)) &#123;</span><br><span class="line">            map.put(n, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(n, map.get(n) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.getValue() &gt; nums.length / <span class="number">3</span>) &#123;</span><br><span class="line">            res. add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Method 2 Boyer-Moore majority vote Algorithm</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">0</span>, num2 = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (count1 == <span class="number">0</span>) &#123;  </span><br><span class="line">            num1 = num;  </span><br><span class="line">            count1 = <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 == num) &#123;  </span><br><span class="line">            count1 ++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count2 == <span class="number">0</span>) &#123;  </span><br><span class="line">            num2 = num;  </span><br><span class="line">            count2 = <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num2 == num) &#123;  </span><br><span class="line">            count2 ++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            count1 --;  </span><br><span class="line">            count2 --;  </span><br><span class="line">            <span class="keyword">if</span> (count1 == <span class="number">0</span> &amp;&amp; count2 &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                num1 = num2;  </span><br><span class="line">                count1 = count2;  </span><br><span class="line">                num2 = <span class="number">0</span>;  </span><br><span class="line">                count2 = <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (count1 &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        count1 = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) <span class="keyword">if</span> (num1 == num) count1 ++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (count2 &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        count2 = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) <span class="keyword">if</span> (num2 == num) count2 ++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    List&lt;Integer&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">    <span class="keyword">if</span> (count1*<span class="number">3</span>&gt;nums.length) results.add(num1);  </span><br><span class="line">    <span class="keyword">if</span> (count2*<span class="number">3</span>&gt;nums.length) results.add(num2);  </span><br><span class="line">    <span class="keyword">return</span> results;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> HashMap </tag>
            
            <tag> Boyer-Moore majority vote Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>169. Majority Elemnt</title>
      <link href="/2018/06/04/169-Majority-Elemnt/"/>
      <url>/2018/06/04/169-Majority-Elemnt/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>appears more than [ n/2 ], after sort the nums[n/2] must be the majority number</p><p>这道题有很多解法</p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(nlogn)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hashtable </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement2</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; myMap = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">    <span class="comment">//Hashtable&lt;Integer, Integer&gt; myMap = new Hashtable&lt;Integer, Integer&gt;();</span></span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!myMap.containsKey(num))</span><br><span class="line">            myMap.put(num, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            myMap.put(num, myMap.get(num)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (myMap.get(num)&gt;nums.length/<span class="number">2</span>) &#123;</span><br><span class="line">            ret = num;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Moore voting algorithm</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement3</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count==<span class="number">0</span>)</span><br><span class="line">            ret = num;</span><br><span class="line">        <span class="keyword">if</span> (num!=ret)</span><br><span class="line">            count--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bit manipulation </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) </span><br><span class="line">            <span class="keyword">if</span> ((num&gt;&gt;(<span class="number">31</span>-i) &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                bit[i]++;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        bit[i]=bit[i]&gt;nums.length/<span class="number">2</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        ret += bit[i]*(<span class="number">1</span>&lt;&lt;(<span class="number">31</span>-i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>119. Pascal&#39;s Triangle II</title>
      <link href="/2018/06/04/119-Pascal-s-Triangle-II/"/>
      <url>/2018/06/04/119-Pascal-s-Triangle-II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal’s triangle.</p><p>Note that the row index starts from 0.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>本来以为很简单的一道题，确卡了我半天，第一个错误时愚蠢的把prev的赋值放在了小循环里， 第二个错误是对ArrayList的set 和 add method 不够熟悉， 我的思路是用一个prev ArrayList去记录上一行的结果。<br>在这个过程中一定要学会ArrayList的set和addmethod的区别</p><ul><li>add<ul><li>add(E e) Appends the specified element to the end of this list. </li><li>add(int index, E element) Inserts the specified element at the specified position in this list.</li></ul></li><li>set<ul><li>set(int index, E element) Replaces the element at the specified position in this list with the specified element.</li></ul></li></ul><p><strong>Discussion</strong><br>discussion里的大佬直接in place的去做，也是打开了新世界的大门。因为index 0 和 index i位永远是1。很明显的，计算下一行的时候需要上一行的值，如果从头修改肯定不行，下一位就缺少了[i-1][j-1]这个值。所以从尾部开始计算。<strong>要在每次循环开始时补上最末尾的1。</strong></p><p><strong>j loop</strong>:</p><blockquote><p>for(int j=i-1;j&gt;0;j–) {res.set(j, res.get(j-1)+res.get(j));}</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// discussion</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;rowIndex+<span class="number">1</span>;i++) &#123;</span><br><span class="line">                res.add(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line">                    res.set(j, res.get(j-<span class="number">1</span>)+res.get(j));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// my solution</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Integer&gt; prev = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">            res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">                    res.add(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   res.add(prev.get(j-<span class="number">1</span>) + prev.get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>118. Pascal&#39;s Triangle</title>
      <link href="/2018/06/04/118-Pascal&#39;s-Triangle/"/>
      <url>/2018/06/04/118-Pascal&#39;s-Triangle/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a non-negative integer numRows, generate the first numRows of Pascal’s triangle.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>除了0 和 i位固定为1， </p><p>其他位置</p><ul><li>triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j-1]</li></ul><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; triangle = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (numRows &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> triangle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">        List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">                row.add(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                row.add(triangle.get(i-<span class="number">1</span>).get(j-<span class="number">1</span>) + triangle.get(i-<span class="number">1</span>).get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        triangle.add(row);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> triangle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>134. Gas Station</title>
      <link href="/2018/06/04/134-Gas-Station/"/>
      <url>/2018/06/04/134-Gas-Station/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</p><p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.</p><p>Return the starting gas station’s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</p><p>Note:</p><p>If there exists a solution, it is guaranteed to be unique.<br>Both input arrays are non-empty and have the same length.<br>Each element in the input arrays is a non-negative integer.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>一开始想的是dfs，因为感觉很像dfs，从第一个点开始尝试看能不能走通，（<strong>未完成</strong>）</p><p><strong>Discussion</strong></p><ol><li>很容易想到，如果 总gas &lt; 总cost，return -1；</li><li>如果前面所有 gas-cost 加起来小于0， 那么前面的gas stattion都不能作为start postion</li></ol><h2 id="Compleixty"><a href="#Compleixty" class="headerlink" title="Compleixty"></a>Compleixty</h2><p>Time：O(n)<br>Space: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++)</span><br><span class="line">        tank += gas[i] - cost[i];</span><br><span class="line">    <span class="keyword">if</span>(tank &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> accumulate = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">        accumulate += gas[i] - cost[i];</span><br><span class="line">        <span class="keyword">if</span>(accumulate &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            start = i + <span class="number">1</span>;</span><br><span class="line">            accumulate = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Greedy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>299. Bulls and Cows</title>
      <link href="/2018/06/03/299-Bulls-and-Cows/"/>
      <url>/2018/06/03/299-Bulls-and-Cows/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p><p>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. </p><p>Please note that both secret number and friend’s guess may contain duplicate digits.</p><p>Note: You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>有点像anagram，可以通过一个数组代替hashmap记录，可以做到one pass</p><ul><li>bulls 很容易， secret.charAt(i) == guess.charAt(i) bulls++</li><li>cows <ul><li>if (numbers[secret.charAt(i)-‘0’]++ &lt; 0) cows++;</li><li>if (numbers[guess.charAt(i)-‘0’]– &gt; 0) cows++;</li></ul></li></ul><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = secret.length();</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> A = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> B = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (secret.charAt(i) == guess.charAt(i)) &#123;</span><br><span class="line">            A++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[secret.charAt(i)]++;</span><br><span class="line">            arr[guess.charAt(i)]--;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            B += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> A+<span class="string">"A"</span>+(len+B-A)+<span class="string">"B"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One Pass<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bulls = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cows = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;secret.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (secret.charAt(i) == guess.charAt(i)) bulls++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[secret.charAt(i)-<span class="string">'0'</span>]++ &lt; <span class="number">0</span>) cows++;</span><br><span class="line">            <span class="keyword">if</span> (numbers[guess.charAt(i)-<span class="string">'0'</span>]-- &gt; <span class="number">0</span>) cows++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bulls + <span class="string">"A"</span> + cows + <span class="string">"B"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>June Plan</title>
      <link href="/2018/06/03/June-Plan/"/>
      <url>/2018/06/03/June-Plan/</url>
      <content type="html"><![CDATA[<h2 id="June-Plan"><a href="#June-Plan" class="headerlink" title="June Plan"></a>June Plan</h2><h3 id="LeetCode-solve-240-problems"><a href="#LeetCode-solve-240-problems" class="headerlink" title="LeetCode: solve 240 problems."></a><strong>LeetCode: solve 240 problems.</strong></h3><ul><li>6/1 2/240</li><li>6/2 5/240</li><li>6/3 9/240</li><li>6/4 15/240<ul><li>134 Gas Station</li><li>118 Pascal’s Triangle</li><li>119 Pascal’s Triangle II</li><li>169 majority Element</li><li>229 majority Element II</li><li>274 H-Index (未完成)</li><li>275 H-Index II （未完成）</li><li>217 Contains Duplicate</li><li>219 Contains Duplicate II</li><li>217 Contains Duplicate III (bucket)</li></ul></li><li><p>*6/5 23/240</p><ul><li>55 Jump Game</li><li>45 Jump Game II</li><li>121 Best Time to Buy and Sell Stock</li><li>122 Best Time to Buy and Sell Stock II</li><li>123 Best Time to Buy and Sell Stock III </li><li>188 Best Time to Buy and Sell Stock IV (未完成)</li><li>309 Best Time to Buy and Sell Stock with Cooldown</li><li>11 Container With Most Water</li></ul></li><li><p>6/6 31/240</p><ul><li>42    Trapping Rain Water</li><li>334    Increasing Triplet Subsequence</li><li>128    Longest Consecutive Sequence</li><li>164    Maximum Gap (Bucket 未完成)</li><li>287    Find the Duplicate Number （Linked List Cycle II)</li><li>135    Candy</li><li>330    Patching Array (未完成)</li><li>289    Game of Life</li></ul></li><li><p>6/7 35/240</p><ul><li>57    Insert Interval </li><li>56    Merge Intervals</li><li>252    Meeting Rooms <strong>(lock)</strong></li><li>253    Meeting Rooms II <strong>(lock)</strong></li><li>352    Data Stream as Disjoint Intervals (awkward)</li><li>239    Sliding Window Maximum</li><li>53    Maximum Subarray</li></ul></li></ul><ul><li>6/8<br>  略略略</li><li><p>6/9</p><ul><li>442 Find All Duplicates in the Array (Medium)</li><li>495 Teemo Attacking (M)</li><li>667 Beautiful Arrangement II (M)</li><li>238 Product of Array Except Self (M)</li><li>565 Array Nesting (M)</li><li>714 Best Time to Buy and Sell Stock with Transaction Fee (M)</li><li>769 Max Chunks To Make Sorted (M)</li><li>768 Max Chunks To Make Sorted (M)</li></ul></li><li><p>6/10</p><ul><li>621 Task Scheduler (n)</li><li>611 Valid Triangle Number (n)</li><li>718 Maximum Length of Repeated Subarray (n)</li></ul></li><li><p>6/11</p><ul><li>54 Spiral Matrix</li><li>59 Spiral Matrix II</li><li>64 Minimum Path Sum</li><li>48 Rotate Image<h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>41. First Missing Positive</title>
      <link href="/2018/06/03/41-First-Missing-Positive/"/>
      <url>/2018/06/03/41-First-Missing-Positive/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an unsorted integer array, find the smallest missing positive integer.<br>Your algorithm should run in O(n) time and uses constant extra space.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>一开始，没看答案写的。找第一个missing positive number，感觉正常的想法会是排序。但是题目要求是O(n) time.<br>Arrays.sort(nums) 是O(nlogn)，所以想到了PriorityQueue（其实也有问题，要求constant extra space）<br>PQ 的 insert time 是O(logn), loop 是O(n).<br>这个方法AC了但是不符合要求</p><p>看了discussion, 感觉所有的Array的题目基本都是要求Space Complexity, 而且这到题是在Array这个tag下面的，<br>希望你练习array的操作，PQ感觉有点作弊。</p><p>discussion的答案是用到index</p><h3 id="situation"><a href="#situation" class="headerlink" title="situation"></a>situation</h3><ol><li><p>不需要改变位置, i++</p><ol><li>right place， nums[i] = i + 1</li><li>no place to put<ul><li>zero &amp;&amp; negative value</li><li>nums[i] &gt; nums.length over the array‘s length</li></ul></li></ol></li><li><p>nums[nums[i] - 1] != nums[i], 当现在数字不在正确位置上时，⚠️交换以后并不是保证这个位置的值就正确所以不能<strong>i++</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ex: </span><br><span class="line">i = 4</span><br><span class="line">nums[4] = 4 + 1</span><br><span class="line">4 = nums[4] - 1</span><br><span class="line">i = nums[i] - 1</span><br></pre></td></tr></table></figure></li></ol><pre><code>- swap(nums[nums[i]-1], nums[i])</code></pre><ol start="3"><li>other i++;</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time: O(n)<br>Space: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">    pq.offer(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">int</span> num = pq.poll();</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == res) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; res) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == i + <span class="number">1</span> || nums[i] &lt;= <span class="number">0</span> || nums[i] &gt;= nums.length)&#123;</span><br><span class="line">            i++;  </span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/*nums[i] &lt; nums.length &amp;&amp; nums[i] != i + 1 &amp;&amp;*/</span> nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            swap(nums, i, nums[i] - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//WA: i++;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums.length &amp;&amp; nums[i] == i+<span class="number">1</span>) i++; </span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> PriorityQueue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>189. Rotate Array</title>
      <link href="/2018/06/02/189-Rotate-Array/"/>
      <url>/2018/06/02/189-Rotate-Array/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array, rotate the array to the right by k steps, where k is non-negative.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>k = k mod nums.length<br>First, according the example hint, rotate the number at the end to the front. It works but it is too slow.</p><p><strong>Another way, use reverse</strong><br>input:  [1,2,3,4,5,6,7] k = 3<br>output: [5,6,7,1,2,3,4]</p><h3 id="Reverse-the-bold-part"><a href="#Reverse-the-bold-part" class="headerlink" title="Reverse the bold part"></a>Reverse the bold part</h3><ol start="0"><li>[1,2,3,4,5,6,7]</li><li>[<strong>4,3,2,1</strong>,5,6,7]</li><li>[4,3,2,1,<strong>7,6,5</strong>]</li><li>[<strong>5,6,7,1,2,3,4</strong>]</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time Complexity: O(n)<br>Space Complexity: O(1)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solution</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    k = k % n;</span><br><span class="line">    reverse(nums, <span class="number">0</span>, n - k - <span class="number">1</span>);</span><br><span class="line">    reverse(nums, n - k, n - <span class="number">1</span>);</span><br><span class="line">    reverse(nums, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = temp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//TLE</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    k = k % n;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// last index</span></span><br><span class="line">        <span class="keyword">int</span> temp = nums[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            nums[i] = nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[<span class="number">0</span>] = temp;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>80. Remove Duplicates from Sorted Array II</title>
      <link href="/2018/06/02/80-Remove-Duplicates-from-Sorted-Array-II/"/>
      <url>/2018/06/02/80-Remove-Duplicates-from-Sorted-Array-II/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>This question is the follow-up of <a href="../26-Remove-Duplicates-from-Sorted-Array/index.html">Remove-Duplicates-from Sorted Array</a>.</p><h3 id="Two-situation"><a href="#Two-situation" class="headerlink" title="Two situation"></a>Two situation</h3><ol><li>nums[fast] == nums[fast - 1]<ol><li>cnt &lt; 2: <ul><li>nums[cur++] = nums[f] (legal state)</li><li>cnt++</li></ul></li><li>cnt &gt;= 2: <ul><li>cur doesn’t move</li><li>cnt++</li></ul></li></ol></li><li>nums[fast] == nums[fast - 1]<ul><li>nums[cur++] = nums[f]</li><li>cnt reset, cnt = 1</li></ul></li></ol><p><strong>本来在legal state这个部分没有想明白这里为什么需要交换, 本来认为legal state，cnt没有到2 所以只要cur++就可以了。 但在下面的情况</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test case[0,0,1,1,1,1,2,3,3] 过不了。</span><br><span class="line">WA: [0,0,1,1,2,3,2]</span><br><span class="line">[0,0,1,1,2,1,2,3,3] cnt = 1</span><br><span class="line">         c     f</span><br><span class="line">[0,0,1,1,2,3,2,3,3] cnt = 1 此时cnt还没有增加，如果只是cur++则出现WA，</span><br><span class="line">           c     f</span><br></pre></td></tr></table></figure></p><p>因为即使相同，第二个3没有在正确的位置上，换句话说就是<strong>只要是legal的就要换到正确的位置上因为fast的位置是不确定的, 正确的位置总是cur+1</strong></p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time Complexity: O(n)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> nums.length;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">1</span>; f &lt; nums.length; f++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[f] == nums[f - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                nums[cur++] = nums[f];</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[cur++] = nums[f];</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>26. Remove Duplicates from Sorted Array</title>
      <link href="/2018/06/02/26-Remove-Duplicates-from-Sorted-Array/"/>
      <url>/2018/06/02/26-Remove-Duplicates-from-Sorted-Array/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>Use two pointer:</p><ol><li>record current index postion</li><li>iterate array and compare element with cur postion if the value is different replace the nums[cur++] = nums[fast]</li></ol><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>Time Complexity: <strong>O(n)</strong></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> nums.length;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> fast = <span class="number">1</span>; fast &lt; nums.length; ++fast) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != nums[fast-<span class="number">1</span>])&#123;</span><br><span class="line">          nums[cur++] = nums[fast];  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark and Scala</title>
      <link href="/2018/06/02/Spark-and-Scala/"/>
      <url>/2018/06/02/Spark-and-Scala/</url>
      <content type="html"><![CDATA[<h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><h3 id="Initializing-Spark-in-Java"><a href="#Initializing-Spark-in-Java" class="headerlink" title="Initializing Spark in Java"></a>Initializing Spark in Java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.spark.SparkConf</span><br><span class="line">import org.apache.spark.SparkContext</span><br><span class="line">import org.apache.spark.SparkContext._</span><br><span class="line">val conf = new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;My App&quot;)</span><br><span class="line">val sc = new SparkContext(conf)</span><br></pre></td></tr></table></figure><h3 id="Definiation"><a href="#Definiation" class="headerlink" title="Definiation"></a>Definiation</h3><p>RDD: resilient distributed dataset<br>sc: SparkContext</p><h1 id="Scala-Syntax"><a href="#Scala-Syntax" class="headerlink" title="Scala Syntax"></a>Scala Syntax</h1><p><strong>To install</strong>: The repository is too old(2.9.2) use the command</p><p>wget <a href="http://www.scala-lang.org/files/archive/scala-2.11.7.deb" target="_blank" rel="noopener">www.scala-lang.org/files/archive/scala-2.11.7.deb</a><br>sudo dpkg -i scala-2.11.7.deb</p><p><strong>syntax</strong>: val <identifier>[: <type>] = <data>  //[: type] is optional</data></type></identifier></p><p>REPL: scala Interpreter</p><ul><li>val for value is immutable</li><li>var for variable is mutable</li></ul><p>since value is immutable we perfer value to prevent unexpected change</p><h3 id="numeric"><a href="#numeric" class="headerlink" title="numeric"></a>numeric</h3><p>Scala does not allow automatic conversion from higher ranked types to lower ranked types. You can choose to manually convert between types using the <em>toType</em> methods available on all numeric types.</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>A multiline String can be created using triple-quotes. Multiline strings are literal, and<br>so do not recognize the use of backslashes as the start of special characters:</p><p>You will need the optional braces if you have any nonword characters in your reference (such as a calculation), or if your reference can’t be distinguished from the surrounding text: ${<value name="">} or ${<value name=""> * num}</value></value></p><h3 id="Regular-expression"><a href="#Regular-expression" class="headerlink" title="Regular expression"></a>Regular expression</h3><p><strong><em>Syntax</em></strong>: val <regex value="">(<identifier>) = <input string=""></identifier></regex></p><ul><li>The value will be stored in identifier</li><li>convert a string to a regular ex‐ pression type by invoking its r operator.</li></ul><p>We’ll use multiline strings to store our regular expression pattern, because they are literal and allow us to write a backslash without a second, escaping backslash:</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><ul><li>Any is the root of scala type</li><li>ref is access via memory reference</li><li>Nothing is a subtype of every other type and exists to provide a compatible return type for operations that significantly affect a program’s flow. </li><li>Null, a subtype of all AnyRef types that exists to provide a type for the keyword null. such that the variable does not point to any string instance in memory.</li><li>&amp; and | will always check the second variable or expression. &amp;&amp; and || are lazy they only check the first one. If the first one is sufficient, it stops.</li><li>Scala does not support automatic conversion of other types to Booleans</li><li>Unit type is used to describe the function doesnt return anything. Like the void in C++ &amp;&amp; Java. Unit literally equal to () Unit = ()</li></ul><h4 id="Type-Operation"><a href="#Type-Operation" class="headerlink" title="Type Operation"></a>Type Operation</h4><p><strong>Syntax</strong>: val.<type operation=""></type></p><p><strong>perfer to<type> avoid asInstanceof[<type>]</type></type></strong></p><ul><li>asInstanceOf[<type>]: change to type </type></li><li>getClass: return type of value</li><li>isInstanceOf: return true if the value has the given type</li><li>hashCode: Returns the hash code of the value, useful for hash-based collections</li><li>to<type>: Conversion functions to convert a value to a compatible value.</type></li><li>toString: Renders the value to aString.</li></ul><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p><strong>Syntax</strong>: ( <value 1="">, <value 2="">[, <value 3="">…] )</value></value></value></p><p>access an individual element from a tuple by its 1-based index (e.g., where the first element is 1, second is 2, etc.):</p><p><em>example</em>: tuplename._1</p><p>An alternate form of creating a 2-sized tuple is with the relation operator (-&gt;). This is a popular shortcut for representing key-value pairs in tuples:</p><p>scala&gt; val red = “red” -&gt; “0xff0000”<br>red: (String, String) = (red,0xff0000)</p><h3 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p><strong>if-else</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (&lt;Boolean expression&gt;) &lt;expression&gt;</span><br><span class="line">else &lt;expression&gt;</span><br></pre></td></tr></table></figure></p><p><strong>match</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;expression&gt; match &#123;</span><br><span class="line">      case &lt;pattern match&gt; =&gt; &lt;expression&gt;</span><br><span class="line">      [case...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Matching with Wildcard Patterns</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case &lt;identifier&gt; =&gt; &lt;one or more expressions&gt;</span><br></pre></td></tr></table></figure></p><p><strong>A Wildcard Operator Pattern</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case _ =&gt; &lt;one or more expressions&gt;</span><br></pre></td></tr></table></figure></p><p><strong>A Pattern Guard</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case &lt;pattern&gt; if &lt;Boolean expression&gt; =&gt; &lt;one or more expressions&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Specifying a Pattern Variable</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case &lt;identifier&gt;: &lt;type&gt; =&gt; &lt;one or more expressions&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h2><h3 id="Range-and-For-Loop"><a href="#Range-and-For-Loop" class="headerlink" title="Range and For-Loop"></a>Range and For-Loop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//range</span><br><span class="line">&lt;starting integer&gt; [to|until] &lt;ending integer&gt; [by increment]</span><br><span class="line"></span><br><span class="line">//for   the yield keyword to con‐ vert the entire loop into an expression that returns the collection:</span><br><span class="line">for (&lt;identifier&gt; &lt;- &lt;iterator&gt;) [yield] [&lt;expression&gt;]</span><br><span class="line"></span><br><span class="line">//An Iterator Guard</span><br><span class="line">for (&lt;identifier&gt; &lt;- &lt;iterator&gt; if &lt;Boolean expression&gt;) ...</span><br></pre></td></tr></table></figure><h2 id="Value-Binding"><a href="#Value-Binding" class="headerlink" title="Value Binding"></a>Value Binding</h2><p>Syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Value Binding in For-Loops</span><br><span class="line">for (&lt;identifier&gt; &lt;- &lt;iterator&gt;; &lt;identifier&gt; = &lt;expression&gt;) ...</span><br></pre></td></tr></table></figure></p><h2 id="While"><a href="#While" class="headerlink" title="While"></a>While</h2><p>Syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// A While Loop</span><br><span class="line">while (&lt;Boolean expression&gt;) statement</span><br></pre></td></tr></table></figure></p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Syntax:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Defining an Input-less Function</span><br><span class="line">    def &lt;identifier&gt; = &lt;expression&gt;</span><br><span class="line"></span><br><span class="line">Defining a Function with a Return Type</span><br><span class="line">    def &lt;identifier&gt;: &lt;type&gt; = &lt;expression&gt;</span><br><span class="line">    </span><br><span class="line">Defining a Function</span><br><span class="line">    def &lt;identifier&gt;(&lt;identifier&gt;: &lt;type&gt;[, ... ]): &lt;type&gt; = &lt;expression&gt;</span><br><span class="line">    </span><br><span class="line">Defining a Function with Empty Parentheses</span><br><span class="line">    def &lt;identifier&gt;()[: &lt;type&gt;] = &lt;expression&gt;</span><br><span class="line">    </span><br><span class="line">Invoking a Function with an Expression Block</span><br><span class="line">    &lt;function identifier&gt; &lt;expression block&gt;</span><br><span class="line"></span><br><span class="line">Specifying a Parameter by Name</span><br><span class="line">&lt;function name&gt;(&lt;parameter&gt; = &lt;value&gt;)</span><br><span class="line"></span><br><span class="line">Specifying a Default Value for a Function Parameter</span><br><span class="line">def &lt;identifier&gt;(&lt;identifier&gt;: &lt;type&gt; = &lt;value&gt;): &lt;type&gt;</span><br><span class="line"></span><br><span class="line">Defining a Function’s Type Parameters</span><br><span class="line">def &lt;function-name&gt;[type-name](parameter-name&gt;: &lt;type-name&gt;): &lt;type-name&gt;...</span><br><span class="line"></span><br><span class="line"> A Function Type</span><br><span class="line">    ([&lt;type&gt;, ...]) =&gt; &lt;type&gt;</span><br><span class="line">    </span><br><span class="line">Assigning a Function with the Wildcard Operator</span><br><span class="line">    val &lt;identifier&gt; = &lt;function name&gt; _</span><br><span class="line"></span><br><span class="line">Writing a Function Literal    </span><br><span class="line">([&lt;identifier&gt;: &lt;type&gt;, ... ]) =&gt; &lt;expression&gt;</span><br><span class="line"></span><br><span class="line">Specifying a By-Name Parameter</span><br><span class="line">    &lt;identifier&gt;: =&gt; &lt;type&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>27. remove Element</title>
      <link href="/2018/06/01/27.%20Remove%20Element/"/>
      <url>/2018/06/01/27.%20Remove%20Element/</url>
      <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.</p><p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><a id="more"></a><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p><strong>三种情况</strong></p><ol><li>如果nums[end] == val，end–，直到nums[end] != val</li><li>如果nums[start] == val, 交换nums[start] and nums[end], start++; end–</li><li>nums[start] != val, start++, 继续循环</li></ol><p><em>Java only pass by value. Java does not pass by reference</em></p><h3 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3><p>Worst Case:</p><p>All numbers are target num. Time Complexity is <strong>O(n)</strong></p><p>It is In-Place use <strong>O(1)</strong> to swap</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;·</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[end] == val) &#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[start] == val) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">                nums[start] = nums[end];</span><br><span class="line">                nums[end] = temp;</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> end + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Array </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>92. Backpack</title>
      <link href="/2018/06/01/92.%20Backpack/"/>
      <url>/2018/06/01/92.%20Backpack/</url>
      <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given n items with size Ai, an integer m denotes the size of a backpack. How full you can fill this backpack?</span><br></pre></td></tr></table></figure><p>动态规划4要素</p><pre><code>State:    f[i][S] “前i”个物品，取出一些能否组成和为SFunction:    f[i][S] = f[i-1][S - a[i]] or f[i-1][S]Initialize:    f[i][0] = true; f[0][1..target] = falseAnswer:    检查所有的f[n][j]</code></pre><p>O(n * S) ， 滚动数组优化<br>`</p><h4 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> m: An integer m denotes the size of a backpack</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> A: Given n items with size A[i]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: The maximum size</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backPack</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[A.length + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] || (j - A[i - <span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][j - A[i - <span class="number">1</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[A.length][j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backPack</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp当书包空间为i时，能装的A物品最大容量</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历A数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= A[i]) &#123;</span><br><span class="line">                    <span class="comment">// j-A[i]</span></span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j-A[i]] + A[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/26/hello-world/"/>
      <url>/2018/03/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
